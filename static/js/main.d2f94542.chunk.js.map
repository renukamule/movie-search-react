{"version":3,"sources":["components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","borderRadius","maxHeight","maxWidth","minHeight","minWidth","boxShadow","margin","padding","container","alignItems","justifyContent","form","display","textAlign","marginBlock","image","sort","Search","props","classes","useTheme","useState","searchInput","setSearchInput","searchResult","setSearchResult","searchQuery","setSearchQuery","useEffect","fetch","then","resp","json","response","Response","console","log","Error","length","newQuery","slice","catch","message","handleSubmit","e","a","preventDefault","onDragEnd","result","destination","index","source","itemsReorder","reorder","list","startIndex","endIndex","Array","from","splice","removed","className","TextField","onChange","target","value","label","variant","IconButton","color","onClick","type","Typography","sortArray","concat","b","Title","fontSize","Year","droppableId","provided","snapshot","droppableProps","ref","innerRef","map","item","draggableId","imdbID","Grid","spacing","draggableProps","dragHandleProps","xs","paper","Card","component","CardMedia","alt","height","width","Poster","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2f94542.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card'\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: \" #fff\",\n        borderRadius: \"10px\",\n        maxHeight: \"500px\",\n        maxWidth: \"300px\",\n        minHeight: \"400px\",\n        minWidth: \"250px\",\n        boxShadow: '0 3px 5px 2px #aaa',\n        margin: \"10px auto 20px\",\n         padding: \"20px\"\n    },\n    container: {\n         alignItems: \"center\",\n        justifyContent: \"center\"\n\n    },\n    form: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        textAlign: \"center\",\n        marginBlock: \"15px\"\n    },\n    image: {\n        maxHeight: \"300px\",\n        maxWidth: \"400px\"\n    },\n    sort: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        textAlign: \"center\",\n         marginBlock: \"15px\",\n\n    }\n}));\n\nfunction Search(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [searchResult, setSearchResult] = useState([]);\n    const [searchQuery, setSearchQuery] = useState(null);\n\n\n    const handleSearchInput = e => {\n        setSearchInput(e.target.value);\n    }\n\n    useEffect(() => {\n        if (searchQuery) {\n            fetch(`http://www.omdbapi.com/?s=${searchQuery}&apikey=6715d830`)\n                .then(resp => resp)\n                .then(resp => resp.json())\n                .then(response => {\n                    if (response.Response === 'False') {\n                        console.log(response.Error);\n\n                        if (searchInput.length > 3) {\n                            let newQuery = searchInput.slice(0, 3);\n                            setSearchQuery(newQuery);\n                        }\n\n\n                    }\n                    else {\n                        setSearchResult(response.Search);\n\n                    }\n\n                })\n                .catch(({ message }) => {\n                    console.log(\"error\")\n                })\n        }\n    }, [searchQuery])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        setSearchQuery(searchInput);\n\n\n    };\n    function onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n\n        if (result.destination.index === result.source.index) {\n            return;\n        }\n\n        const itemsReorder = reorder(\n            searchResult,\n            result.source.index,\n            result.destination.index\n        );\n\n        setSearchResult(itemsReorder);\n    }\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    const sortYear = () => {\n        const sortArray = [].concat(searchResult);\n        sortArray.sort((a, b) => a.Year > b.Year ? 1 : -1);\n        setSearchResult(sortArray);\n    }\n    const sortYearDesc = () => {\n        const sortArray = [].concat(searchResult);\n        sortArray.sort((a, b) => a.Year > b.Year ? -1 : 1);\n        setSearchResult(sortArray);\n    }\n    const sortTitle = () => {\n        const sortArray = [].concat(searchResult);\n        sortArray.sort((a, b) => a.Title > b.Title ? 1 : -1);\n        setSearchResult(sortArray);\n    }\n    const sortTitleDesc = () => {\n        const sortArray = [].concat(searchResult);\n        sortArray.sort((a, b) => a.Title > b.Title ? -1 : 1);\n        setSearchResult(sortArray);\n    }\n\n    return (\n        <div>\n            <form className=\"search\" className={classes.form}>\n\n                <TextField onChange={handleSearchInput} label=\"Search for movies...\" variant=\"outlined\" />\n\n\n\n                <IconButton variant=\"outlined\" color=\"primary\" onClick={handleSubmit} type=\"submit\" >\n                    <SearchIcon />\n                </IconButton>\n\n            </form>\n            <div className={classes.sort}>\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Sort by Title :\n                                                        </Typography>\n                <IconButton variant=\"outlined\" color=\"primary\" onClick={sortTitle} type=\"submit\" >\n                    <ArrowUpwardIcon fontSize=\"small\"/>\n                </IconButton>\n                <IconButton variant=\"outlined\" color=\"primary\" onClick={sortTitleDesc} type=\"submit\" >\n                    <ArrowDownwardIcon  fontSize=\"small\"/>\n                </IconButton>\n\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Sort by Year :\n                                                        </Typography>\n                <IconButton variant=\"outlined\" color=\"primary\" onClick={sortYear} type=\"submit\" >\n                    <ArrowUpwardIcon fontSize=\"small\"/>\n                </IconButton>\n                <IconButton variant=\"outlined\" color=\"primary\" onClick={sortYearDesc} type=\"submit\" >\n                    <ArrowDownwardIcon fontSize=\"small\"/>\n                </IconButton>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"droppable\" onDragEnd={onDragEnd}>\n                    {(provided, snapshot) => (\n                        <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n\n                        >\n                            {searchResult?.map((item, index) => (\n                                <Draggable key={index} draggableId={item.imdbID} index={index}>\n                                    {(provided, snapshot) => (\n                                        <Grid container spacing={2} className={classes.container} >\n\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                            > <Grid item xs={8} className={classes.paper}>\n                                                    <Card className={classes.root}>\n\n                                                        <Typography variant=\"h5\" component=\"h2\">{item.Title} </Typography>\n\n                                                        <Typography variant=\"h6\" color=\"textSecondary\">\n                                                            ({item.Year})\n                                                        </Typography>\n\n                                                        <div>\n\n                                                            <CardMedia className={classes.image}\n                                                                component=\"img\"\n                                                                alt={`The movie titled: ${item.Title}`}\n                                                                height=\"300px\"\n                                                                width=\"400px\"\n                                                                image={item.Poster}\n                                                            />\n                                                        </div>\n\n                                                    </Card>\n                                                </Grid>\n                                            </div>\n\n                                        </Grid>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n\n        </div>\n    );\n}\n\nexport default Search;","import './App.css';\nimport Search from \"./components/Search\";\n\nfunction App() {\n  return (\n    <div>\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}